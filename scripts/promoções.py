# ==============================================================================
# SCRIPT: aplicar_logica_promocional.py
# RESPONSABILIDADE: Ler as predi√ß√µes puras e aplicar as regras de neg√≥cio.
# QUEM EXECUTA: O analista de marketing/BI, talvez todo dia.
# ==============================================================================

import pandas as pd
import warnings
warnings.filterwarnings("ignore")

print("üü¢ Iniciando script de aplica√ß√£o da l√≥gica de promo√ß√µes...")

# --- ARQUIVOS DE ENTRADA E SA√çDA ---
# !!! ATEN√á√ÉO: Verifique se os caminhos e nomes dos arquivos abaixo est√£o corretos !!!

# Este √© o arquivo gerado pelo seu script de ML
path_predicoes_raw = '../outputs/predicoes_clickbus_hierarquico.csv' 

# Este √© o arquivo que cont√©m a segmenta√ß√£o RFM dos seus clientes
path_segmentos = '../outputs/clientes_segmentados.csv' 

# Este √© o nome do arquivo final que ser√° gerado
path_output_final = '../outputs/predicoes_com_campanhas.csv'


# 1. CARREGAR OS DADOS NECESS√ÅRIOS
try:
    predicoes = pd.read_csv(path_predicoes_raw)
    print(f"‚úÖ Arquivo de predi√ß√µes '{path_predicoes_raw}' carregado com sucesso.")
except Exception as e:
    print(f"‚ùå ERRO: N√£o foi poss√≠vel carregar o arquivo de predi√ß√µes.")
    print(f"   Verifique se o arquivo existe em: '{path_predicoes_raw}'")
    print(f"   Voc√™ rodou o script de ML primeiro?")
    print(e)
    exit()

try:
    df_segmentos = pd.read_csv(path_segmentos)
    # Selecionamos apenas as colunas que vamos usar para a jun√ß√£o
    df_segmentos = df_segmentos[['cliente_id', 'segmento_inteligente']]
    print(f"‚úÖ Arquivo de segmentos '{path_segmentos}' carregado com sucesso.")
except Exception as e:
    print(f"‚ùå ATEN√á√ÉO: N√£o foi poss√≠vel carregar os dados de segmenta√ß√£o.")
    print(f"   Verifique se o arquivo existe em: '{path_segmentos}'")
    print(f"   A coluna de campanha ficar√° incompleta.")
    print(e)
    # Criamos um dataframe vazio para o script n√£o quebrar
    df_segmentos = pd.DataFrame(columns=['cliente_id', 'segmento_inteligente'])

# 2. UNIR AS PREDI√á√ïES COM OS SEGMENTOS DOS CLIENTES
df_final = pd.merge(predicoes, df_segmentos, on='cliente_id', how='left')
df_final['segmento_inteligente'] = df_final['segmento_inteligente'].fillna('Desconhecido')

# 3. DEFINIR A FUN√á√ÉO COM A L√ìGICA DAS CAMPANHAS
def definir_campanha(row):
    # !!! ATEN√á√ÉO: Ajuste os nomes dos segmentos abaixo para bater EXATAMENTE com os nomes no seu arquivo !!!
    segmentos_alto_valor = ['Cliente VIP', 'Frequente Econ√¥mico', 'Campe√µes', 'Fi√©is'] # Exemplo
    segmentos_em_risco = ['Inativo', 'Gastador Ocasional', 'Em Risco'] # Exemplo

    segmento = row['segmento_inteligente']
    compra_prevista = row['ira_comprar_7_dias']

    # Prioridade 1: A√ß√£o Preditiva (maior chance de convers√£o)
    if compra_prevista == 1:
        if segmento in segmentos_alto_valor:
            return 'Preditiva VIP'
        else:
            return 'Preditiva Padr√£o'

    # Prioridade 2: Reativa√ß√£o (maior risco de perda)
    if segmento in segmentos_em_risco:
        return 'Reativa√ß√£o (Risco de Churn)'

    # Prioridade 3: Fideliza√ß√£o (manter os melhores clientes engajados)
    if segmento in segmentos_alto_valor:
        return 'Fideliza√ß√£o VIP'
    
    # Se n√£o se encaixar em nenhuma regra priorit√°ria
    return 'Manuten√ß√£o (Sem A√ß√£o Imediata)'

# 4. APLICAR A L√ìGICA PARA CRIAR A NOVA COLUNA
df_final['campanha_sugerida'] = df_final.apply(definir_campanha, axis=1)
print("‚úÖ L√≥gica de campanha aplicada.")

# 5. (B√îNUS) GERAR TEXTO PERSONALIZADO DA OFERTA
def gerar_texto_oferta(row):
    campanha = row['campanha_sugerida']
    trecho = row['proximo_trecho']
    
    if campanha == 'Preditiva VIP':
        return f"Oferta VIP para sua viagem a {trecho}! Use o cupom VIP15."
    if campanha == 'Preditiva Padr√£o':
        return f"Planejando viajar para {trecho}? Use o cupom VIAGEM10 e ganhe 10% off."
    if campanha == 'Reativa√ß√£o (Risco de Churn)':
        return "Sentimos sua falta! Use o cupom VOLTA25 para 25% de desconto em qualquer trecho."
    if campanha == 'Fideliza√ß√£o VIP':
        return "Obrigado por ser VIP! Acumule pontos em dobro na sua pr√≥xima viagem."
    
    return None # Nenhuma oferta para o grupo de manuten√ß√£o

df_final['texto_oferta'] = df_final.apply(gerar_texto_oferta, axis=1)
print("‚úÖ Textos de ofertas personalizadas gerados.")

# 6. SALVAR O RESULTADO FINAL ACION√ÅVEL
print("\nüíæ Salvando arquivo final acion√°vel...")
print("Amostra do arquivo final:")
print(df_final.head(10))

df_final.to_csv(path_output_final, index=False)
print(f"\n‚úÖ Arquivo final com campanhas gerado em '{path_output_final}'")
print("üèÅ Script finalizado com sucesso!")